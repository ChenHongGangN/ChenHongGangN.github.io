<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript 中常用的方法]]></title>
    <url>%2F2018%2F08%2F16%2Fjavascript-%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1.splice()arrayObject.splice(index,howmany,item1,…..,itemX)参数 描述index 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。howmany 必需。要删除的项目数量。如果设置为 0，则不会删除项目。item1, …, itemX 可选。向数组添加的新项目。 2.slice()该方法可从已有的数组中返回选定的元素 返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。arrayObject.slice(start,end)start 必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。end 可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue之计算缓存 VS Methods]]></title>
    <url>%2F2018%2F08%2F13%2Fvue%E4%B9%8B%E8%AE%A1%E7%AE%97%E7%BC%93%E5%AD%98-VS-Methods%2F</url>
    <content type="text"><![CDATA[计算属性在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。在模板中放入太多的逻辑会让模板过重且难以维护。例如： 在这种情况下，模板不再简单和清晰。在实现反向显示 message 之前，你应该确认它。这个问题在你不止一次反向显示 message 的时候变得更加糟糕。 这就是为什么任何复杂逻辑，你都应当使用计算属性。 基础例子 结果： Original message: “Hello” Computed reversed message: “olleH” 这里我们声明了一个计算属性 reversedMessage 。我们提供的函数将用作属性 vm.reversedMessage 的 getter 。 你可以打开浏览器的控制台，修改 vm 。 vm.reversedMessage 的值始终取决于 vm.message 的值。 你可以像绑定普通属性一样在模板中绑定计算属性。 Vue 知道 vm.reversedMessage 依赖于 vm.message ，因此当 vm.message 发生改变时，依赖于 vm.reversedMessage 的绑定也会更新。而且最妙的是我们是声明式地创建这种依赖关系：计算属性的 getter 是干净无副作用的，因此也是易于测试和理解的。 计算缓存 vs Methods你可能已经注意到我们可以通过调用表达式中的method来达到同样的效果： 不经过计算属性，我们可以在 method 中定义一个相同的函数来替代它。对于最终的结果，两种方式确实是相同的。然而，不同的是计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 message 没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。 这也同样意味着如下计算属性将不会更新，因为 Date.now() 不是响应式依赖： 相比而言，每当重新渲染的时候，method 调用总会执行函数。 我们为什么需要缓存？假设我们有一个重要的计算属性 A ，这个计算属性需要一个巨大的数组遍历和做大量的计算。然后我们可能有其他的计算属性依赖于 A 。如果没有缓存，我们将不可避免的多次执行 A 的 getter ！如果你不希望有缓存，请用 method 替代。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot中常用注解@Controller,@RestController,@RequestMapping的区别]]></title>
    <url>%2F2018%2F08%2F10%2FSpringBoot%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-Controller-RestController-RequestMapping%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[@Controller 处理http请求@Controller//@ResponseBodypublic class HelloController { @RequestMapping(value=&quot;/hello&quot;,method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; } }如果直接使用@Controller这个注解，当运行该SpringBoot项目后，在浏览器中输入：local:8080/hello,会得到如下错误提示： 出现这种情况的原因在于：没有使用模版。即@Controller 用来响应页面，@Controller必须配合模版来使用。spring-boot 支持多种模版引擎包括：1，FreeMarker2，Groovy3，Thymeleaf （Spring 官网使用这个）4，Velocity5，JSP （貌似Spring Boot官方不推荐，STS创建的项目会在src/main/resources 下有个templates 目录，这里就是让我们放模版文件的，然后并没有生成诸如 SpringMVC 中的webapp目录） 本文以Thymeleaf为例介绍使用模版，具体步骤如下： 第一步：在pom.xml文件中添加如下模块依赖： &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; 第二步：修改控制器代码，具体为： /** Created by wuranghao on 2017/4/7.*/@Controllerpublic class HelloController { @RequestMapping(value=”/hello”,method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; }}第三步：在resources目录的templates目录下添加一个hello.html文件，具体工程目录结构如下： 其中，hello.html文件中的内容为： wojiushimogui这样，再次运行此项目之后，在浏览器中输入：localhost:8080/hello 就可以看到hello.html中所呈现的内容了。 因此，我们就直接使用@RestController注解来处理http请求来，这样简单的多。 @RestControllerSpring4之后新加入的注解，原来返回json需要@ResponseBody和@Controller配合。 即@RestController是@ResponseBody和@Controller的组合注解。 @RestControllerpublic class HelloController { @RequestMapping(value=&quot;/hello&quot;,method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; } }与下面的代码作用一样 @Controller@ResponseBodypublic class HelloController { @RequestMapping(value=&quot;/hello&quot;,method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; } }@RequestMapping 配置url映射@RequestMapping此注解即可以作用在控制器的某个方法上，也可以作用在此控制器类上。 当控制器在类级别上添加@RequestMapping注解时，这个注解会应用到控制器的所有处理器方法上。处理器方法上的@RequestMapping注解会对类级别上的@RequestMapping的声明进行补充。 看两个例子 例子一：@RequestMapping仅作用在处理器方法上 @RestControllerpublic class HelloController { @RequestMapping(value=&quot;/hello&quot;,method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; } }以上代码sayHello所响应的url=localhost:8080/hello。 例子二：@RequestMapping仅作用在类级别上 /** Created by wuranghao on 2017/4/7.*/@Controller@RequestMapping(“/hello”)public class HelloController { @RequestMapping(method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; }}以上代码sayHello所响应的url=localhost:8080/hello,效果与例子一一样，没有改变任何功能。 例子三：@RequestMapping作用在类级别和处理器方法上 /** Created by wuranghao on 2017/4/7.*/@RestController@RequestMapping(“/hello”)public class HelloController { @RequestMapping(value=”/sayHello”,method= RequestMethod.GET) public String sayHello(){ return &quot;hello&quot;; } @RequestMapping(value=”/sayHi”,method= RequestMethod.GET) public String sayHi(){ return &quot;hi&quot;; }}这样，以上代码中的sayHello所响应的url=localhost:8080/hello/sayHello。 sayHi所响应的url=localhost:8080/hello/sayHi。 从这两个方法所响应的url可以回过头来看这两句话：当控制器在类级别上添加@RequestMapping注解时，这个注解会应用到控制器的所有处理器方法上。处理器方法上的@RequestMapping注解会对类级别上的@RequestMapping的声明进行补充。 最后说一点的是@RequestMapping中的method参数有很多中选择，一般使用get/post. 小结本篇博文就介绍了下@Controller/@RestController/@RequestMappping几种常用注解，下篇博文将介绍几种如何处理url中的参数的注解@PathVaribale/@RequestParam/@GetMapping。 其中，各注解的作用为： @PathVaribale 获取url中的数据 @RequestParam 获取请求参数的值 @GetMapping 组合注解]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杀掉某个端口进程]]></title>
    <url>%2F2018%2F08%2F03%2F%E6%9D%80%E6%8E%89%E6%9F%90%E4%B8%AA%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.打开CMD命令窗口，输入命令： netstat -ano | findstr 4000 //4000是需要杀掉的端口号 2.通过以上命令找到该进程的PID,然后就可以执行杀死操作 taskkill -PID 14544 -F /14544为该进程的PID/]]></content>
      <categories>
        <category>知识小记</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，Hexo]]></title>
    <url>%2F2018%2F08%2F02%2F%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo%2F</url>
    <content type="text"><![CDATA[开始记录自己的学习历程]]></content>
      <categories>
        <category>点滴</category>
      </categories>
      <tags>
        <tag>点滴</tag>
      </tags>
  </entry>
</search>
